<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="org.funding.project.dao.ProjectDAO">

    <insert id="insertProject" parameterType="org.funding.project.vo.ProjectVO" useGeneratedKeys="true" keyProperty="projectId">
        INSERT INTO project (title, promotion, project_type, progress, deadline, create_at, user_id)
        VALUES (#{title}, #{promotion}, #{projectType}, #{progress}, #{deadline}, NOW(), #{userId})
    </insert>

    <insert id="insertSavingsProject" parameterType="org.funding.project.vo.SavingsProjectVO">
        INSERT INTO savings_project (project_id, period_days, interest_rate, success_condition)
        VALUES (#{projectId}, #{periodDays}, #{interestRate}, #{successCondition})
    </insert>

    <insert id="insertLoanProject" parameterType="org.funding.project.vo.LoanProjectVO">
        INSERT INTO loan_project (project_id, loan_limit, desired_interest_rate, reward, reward_condition)
        VALUES (#{projectId}, #{loanLimit}, #{desiredInterestRate}, #{reward}, #{rewardCondition})
    </insert>

    <insert id="insertDonationProject" parameterType="org.funding.project.vo.DonationProjectVO">
        INSERT INTO donation_project (project_id, recipient, usage_plan, target_amount)
        VALUES (#{projectId}, #{recipient}, #{usagePlan}, #{targetAmount})
    </insert>

    <insert id="insertChallengeProject" parameterType="org.funding.project.vo.ChallengeProjectVO">
        INSERT INTO challenge_project (project_id, challenge_period_days, reward, reward_condition)
        VALUES (#{projectId}, #{challengePeriodDays}, #{reward}, #{rewardCondition})
    </insert>

    <!--    프로젝트 공통 항목 조회 쿼리-->
    <select id="selectProjectById" parameterType="Long" resultType="org.funding.project.vo.ProjectVO">
        SELECT
            p.project_id,
            p.title,
            p.promotion,
            p.project_type,
            p.progress,
            p.create_at,
            p.deadline,
            p.user_id,

            u.nickname,
            u.email,

            b.badge_id,
            b.name AS badgeName
        FROM project p
                 JOIN member u ON p.user_id = u.user_id
                 LEFT JOIN user_badge ub ON u.user_id = ub.user_id
                 LEFT JOIN badge b ON ub.badge_id = b.badge_id
        WHERE p.project_id = #{projectId}
    </select>

    <select id="getTopProjects" resultType="org.funding.project.dto.response.TopProjectDTO">
        SELECT p.project_id,
               p.title,
               p.promotion,
               p.project_type,
               p.progress,
               p.create_at,
               COUNT(v.vote_id) AS vote_count
        FROM project p
                 LEFT JOIN votes v
                           ON p.project_id = v.project_id
        GROUP BY p.project_id
--                  , p.title, p.deadline, p.create_at,
--                  p.user_id, p.project_type, p.progress, p.promotion
        ORDER BY vote_count DESC, p.create_at DESC

    </select>

    <select id="getProjectTypeDistribution" resultType="map">
        SELECT
            project_type AS type,
            COUNT(*) AS count
        FROM project
        GROUP BY project_type
    </select>

<!--    <select id="getProjectTrends" resultType="map">-->
<!--        SELECT-->
<!--            project_type,-->
<!--            CASE-->
<!--                WHEN create_at >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 'Week5'-->
<!--                WHEN create_at >= DATE_SUB(CURDATE(), INTERVAL 14 DAY) THEN 'Week4'-->
<!--                WHEN create_at >= DATE_SUB(CURDATE(), INTERVAL 21 DAY) THEN 'Week3'-->
<!--                WHEN create_at >= DATE_SUB(CURDATE(), INTERVAL 28 DAY) THEN 'Week2'-->
<!--                WHEN create_at >= DATE_SUB(CURDATE(), INTERVAL 35 DAY) THEN 'Week1'-->
<!--                END AS week_group,-->
<!--            COUNT(*) AS count-->
<!--        FROM project-->
<!--        WHERE create_at >= DATE_SUB(CURDATE(), INTERVAL 35 DAY)-->
<!--        GROUP BY week_group, project_type-->
<!--        ORDER BY week_group ASC-->
<!--    </select>-->

    <select id="getProjectTrends" resultType="map">
        SELECT
            project_type,
            CASE
                WHEN create_at &gt;= DATE_SUB(CURDATE(), INTERVAL 7 DAY)
                    AND create_at &lt; CURDATE() THEN 'Week1'
                WHEN create_at &gt;= DATE_SUB(CURDATE(), INTERVAL 14 DAY)
                    AND create_at &lt; DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 'Week2'
                WHEN create_at &gt;= DATE_SUB(CURDATE(), INTERVAL 21 DAY)
                    AND create_at &lt; DATE_SUB(CURDATE(), INTERVAL 14 DAY) THEN 'Week3'
                WHEN create_at &gt;= DATE_SUB(CURDATE(), INTERVAL 28 DAY)
                    AND create_at &lt; DATE_SUB(CURDATE(), INTERVAL 21 DAY) THEN 'Week4'
                WHEN create_at &gt;= DATE_SUB(CURDATE(), INTERVAL 35 DAY)
                    AND create_at &lt; DATE_SUB(CURDATE(), INTERVAL 28 DAY) THEN 'Week5'
                END AS week_group,
            COUNT(*) AS count
        FROM project
        WHERE create_at &gt;= DATE_SUB(CURDATE(), INTERVAL 35 DAY)
        GROUP BY week_group, project_type
        ORDER BY week_group ASC
    </select>







    <select id="getTopProjects222" resultType="org.funding.project.dto.response.TopProjectDTO">
        select *
        from project
    </select>


<!--    프로젝트 투표수 계산 쿼리-->
    <!-- MyBatis Mapper XML -->
    <select id="countVotes" parameterType="Long" resultType="Long">
        SELECT COUNT(*) FROM votes WHERE project_id = #{projectId}
    </select>


    <!--    프로젝트 타입별 상세 조회 쿼리-->

    <!--    저축형 프로젝트-->
    <select id="selectSavingByProjectId" parameterType="Long" resultType="org.funding.project.vo.SavingsProjectVO">
        SELECT * FROM savings_project WHERE project_id = #{projectId}
    </select>

    <!--    대출형 프로젝트-->
    <select id="selectLoanByProjectId" parameterType="Long" resultType="org.funding.project.vo.LoanProjectVO">
        SELECT * FROM loan_project WHERE project_id = #{projectId}

    </select>

    <!--    챌린지형 프로젝트-->
    <select id="selectChallengeByProjectId" parameterType="Long" resultType="org.funding.project.vo.ChallengeProjectVO">
        SELECT * FROM challenge_project WHERE project_id = #{projectId}
    </select>

<!--    기부형 프로젝트-->
    <select id="selectDonationByProjectId" parameterType="Long" resultType="org.funding.project.vo.DonationProjectVO">
        SELECT * FROM donation_project WHERE project_id = #{projectId}
    </select>

    <select id="getAllProjects" resultType="org.funding.project.dto.response.ProjectListDTO">
        SELECT project_id,title, project_type, create_at, user_id, deadline, progress, promotion FROM project
    </select>

    <select id="searchProjectsByKeyword" resultType="org.funding.project.dto.response.ProjectListDTO">
        SELECT project_id,title, project_type, create_at, user_id, deadline FROM project WHERE title LIKE CONCAT('%', #{keyword}, '%')
    </select>

    <select id="searchProjectsByType" resultType="org.funding.project.dto.response.ProjectListDTO">
        SELECT project_id, title, project_type, create_at, user_id, deadline FROM project WHERE project_type = #{type}
    </select>

    <delete id="deleteProjectById" parameterType="Long">
        DELETE FROM project WHERE project_id = #{projectId}
    </delete>

    <delete id="deleteSavingsProjectById" parameterType="Long">
        DELETE FROM savings_project WHERE project_id = #{projectId}
    </delete>

    <delete id="deleteLoanProjectById" parameterType="Long">
        DELETE FROM loan_project WHERE project_id = #{projectId}
    </delete>

    <delete id="deleteChallengeProjectById" parameterType="Long">
        DELETE FROM challenge_project WHERE project_id = #{projectId}
    </delete>

    <delete id="deleteDonationProjectById" parameterType="Long">
        DELETE FROM donation_project WHERE project_id = #{projectId}
    </delete>

    <!-- 마이페이지 관련 쿼리들 -->
    <select id="findByUserId" parameterType="Long" resultType="org.funding.project.vo.ProjectVO">
        SELECT
            project_id,
            title,
            promotion,
            project_type,
            progress,
            create_at,
            deadline,
            user_id
        FROM project
        WHERE user_id = #{userId}
        ORDER BY create_at DESC
    </select>

    <select id="countByUserId" parameterType="Long" resultType="int">
        SELECT COUNT(*)
        FROM project
        WHERE user_id = #{userId}
    </select>

    <select id="findById" parameterType="Long" resultType="org.funding.project.vo.ProjectVO">
        SELECT
            project_id,
            title,
            promotion,
            project_type,
            progress,
            create_at,
            deadline,
            user_id
        FROM project
        WHERE project_id = #{projectId}
    </select>
</mapper>
